// Targeted by JavaCPP version 1.4.4: DO NOT EDIT THIS FILE

package com.criteo.hnsw;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class HnswLib extends com.criteo.hnsw.HnswLibConfig {
    static { Loader.load(); }

// Parsed from hnswjava.h

// #include <iostream>
// #include "hnswlib.h"
    public static native long createAngular(int dim);

    public static native long createEuclidean(int dim);

    public static native long createDotProduct(int dim);

    public static native void destroyIndex(long index);

    public static native void initNewIndex(long index, @Cast("const size_t") long maxElements, @Cast("const size_t") long M, @Cast("const size_t") long efConstruction, @Cast("const size_t") long random_seed);

    public static native void setEf(long index, @Cast("size_t") long ef);

    public static native void saveIndex(long index, @StdString BytePointer path_to_index);
    public static native void saveIndex(long index, @StdString String path_to_index);

    public static native void loadIndex(long index, @StdString BytePointer path_to_index);
    public static native void loadIndex(long index, @StdString String path_to_index);

    public static native void addItem(long index, FloatPointer vector, @Cast("size_t") long id);
    public static native void addItem(long index, FloatBuffer vector, @Cast("size_t") long id);
    public static native void addItem(long index, float[] vector, @Cast("size_t") long id);

    public static native @StdVector FloatPointer getItem(long index, @Cast("size_t") long id);

    public static native @Cast("size_t*") @StdVector SizeTPointer getIdsList(long index);

    public static native @Cast("size_t") long getNbItems(long index);

    public static native @Cast("size_t") long knnQuery(long index, FloatPointer vector, @Cast("size_t*") SizeTPointer items, FloatPointer distances, @Cast("size_t") long k);
    public static native @Cast("size_t") long knnQuery(long index, FloatBuffer vector, @Cast("size_t*") SizeTPointer items, FloatBuffer distances, @Cast("size_t") long k);
    public static native @Cast("size_t") long knnQuery(long index, float[] vector, @Cast("size_t*") SizeTPointer items, float[] distances, @Cast("size_t") long k);


}
