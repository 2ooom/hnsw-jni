// Targeted by JavaCPP version 1.4.4: DO NOT EDIT THIS FILE

package com.criteo.hnsw;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class HnswLib extends com.criteo.hnsw.HnswLibConfig {
    static { Loader.load(); }

// Parsed from hnswjava.h

// #include <iostream>
// #include "hnswlib.h"
    public static native long createAngular(int dim);

    public static native long createEuclidean(int dim);

    public static native long createDotProduct(int dim);

    public static native void init_new_index(long index, @Cast("const size_t") long maxElements, @Cast("const size_t") long M, @Cast("const size_t") long efConstruction, @Cast("const size_t") long random_seed);

    public static native void set_ef(long index, @Cast("size_t") long ef);

    public static native void saveIndex(long index, @StdString BytePointer path_to_index);
    public static native void saveIndex(long index, @StdString String path_to_index);

    public static native void loadIndex(long index, @StdString BytePointer path_to_index, @Cast("size_t") long max_elements);
    public static native void loadIndex(long index, @StdString String path_to_index, @Cast("size_t") long max_elements);

    public static native void addItem(long index, FloatPointer vector);
    public static native void addItem(long index, FloatBuffer vector);
    public static native void addItem(long index, float[] vector);

    public static native @Cast("unsigned int*") @StdVector IntPointer getIdsList(long index);

    public static native void knnQuery(long index, FloatPointer vector, Pointer items, FloatPointer distances, @Cast("size_t") long k);
    public static native void knnQuery(long index, FloatBuffer vector, Pointer items, FloatBuffer distances, @Cast("size_t") long k);
    public static native void knnQuery(long index, float[] vector, Pointer items, float[] distances, @Cast("size_t") long k);


}
